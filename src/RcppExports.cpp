// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// trimTree
SEXP trimTree(ListOf<IntegerVector> tipPaths, ListOf<CharacterVector> alignedSeqs, float similarity, bool getTips);
RcppExport SEXP _sitePath_trimTree(SEXP tipPathsSEXP, SEXP alignedSeqsSEXP, SEXP similaritySEXP, SEXP getTipsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ListOf<IntegerVector> >::type tipPaths(tipPathsSEXP);
    Rcpp::traits::input_parameter< ListOf<CharacterVector> >::type alignedSeqs(alignedSeqsSEXP);
    Rcpp::traits::input_parameter< float >::type similarity(similaritySEXP);
    Rcpp::traits::input_parameter< bool >::type getTips(getTipsSEXP);
    rcpp_result_gen = Rcpp::wrap(trimTree(tipPaths, alignedSeqs, similarity, getTips));
    return rcpp_result_gen;
END_RCPP
}
// getReference
IntegerVector getReference(std::string refSeq, char gapChar);
RcppExport SEXP _sitePath_getReference(SEXP refSeqSEXP, SEXP gapCharSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type refSeq(refSeqSEXP);
    Rcpp::traits::input_parameter< char >::type gapChar(gapCharSEXP);
    rcpp_result_gen = Rcpp::wrap(getReference(refSeq, gapChar));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sitePath_trimTree", (DL_FUNC) &_sitePath_trimTree, 4},
    {"_sitePath_getReference", (DL_FUNC) &_sitePath_getReference, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_sitePath(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
